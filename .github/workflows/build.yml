name: Build

on:
  push:
    tags:
      - 'v*'
  # This is for example and easy debug, probably you don't want to run binaries build on each PR push
  pull_request:
    branches:
      - main

jobs:
  check_modified_binaries:
    name: Check modified binaries
    runs-on: ubuntu-latest
    outputs:
      modified_service: ${{ steps.gta.outputs.value }}
    env:
      TAG_PREFIX: v*
    steps:
      # Install Go and fetch app sources
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.17
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Should fetch all commits, not only last commit, to allow GTA analyze it

      # Detect previous tag
      - run: echo ${{ github.ref }}
      - name: Get Previous tag (current event is tag)
        if: startsWith(github.ref, 'refs/tags/${{ env.TAG_PREFIX }}')
        run: echo "previous_tag=$(git for-each-ref --sort=-creatordate --count 2 --format="%(refname:short)" "refs/tags/${{ env.TAG_PREFIX }}" | tail -n 1)" >> $GITHUB_ENV
      - name: Get Previous tag (current event is PR)
        if: github.event_name == 'pull_request'
        run: echo "previous_tag=$(git for-each-ref --sort=-creatordate --count 1 --format="%(refname:short)" "refs/tags/${{ env.TAG_PREFIX }}")" >> $GITHUB_ENV
      - run: echo "Previous tag is ${{ env.previous_tag }}"

      # Install GTA and prepare
      - name: Install GTA
        run: go install github.com/digitalocean/gta/cmd/gta@latest
      - name: Vendor deps
        run: go mod vendor

      # Debug
      - run: echo "These line is here to show how this pipeline works step by step"
      - run: gta -base ${{ env.previous_tag }} ./... | tr -s " " "\012"
      - run: gta -base ${{ env.previous_tag }} ./... | tr -s " " "\012" | grep gta_test/cmd/ | cat
      - run: gta -base ${{ env.previous_tag }} ./... | tr -s " " "\012" | grep gta_test/cmd/ | sed -e 's/example.com\/gta_test\/cmd\///g'
      - run: gta -base ${{ env.previous_tag }} ./... | tr -s " " "\012" | grep gta_test/cmd/ | sed -e 's/example.com\/gta_test\/cmd\///g' | jq -R -s -c 'split("\n")[:-1]'

      # Detect changed executables
      - name: Find all changed packages comparing to ${{ env.previous_tag }}
        id: gta
        run:
          # Get all affected by this PR packages
          # Split each package on new line
          # Filter executable binaries in cmd
          # Cut github.com/workato/gta_test/cmd prefix
          # Convert to JSON array
          echo "value=$(gta -base ${{ env.previous_tag }} ./... | tr -s " " "\012" | grep gta_test/cmd/ | sed -e "s/example.com\/gta_test\/cmd\///g" | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

  image_build_preview-label-ci-build-test:
    name: Build docker
    needs: check_modified_binaries
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.check_modified_binaries.outputs.modified_service)[0] != null }}
    strategy:
      fail-fast: false # Don't stop other jobs if one of them has been failed
      matrix:
        service: ${{ fromJSON(needs.check_modified_binaries.outputs.modified_service) }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.17
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build
        run: |
          echo "Build ${{ matrix.service }} binary"
          go build -o ${{ matrix.service }} cmd/${{ matrix.service }}/main.go
